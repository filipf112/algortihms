#include <iostream>
#include <chrono> // dołącz bibliotekę do pomiaru czasu

// Funkcja do podziału tablicy względem elementu podziału
int partition(int A[], int low, int high) {
    int pivot = A[low]; // wybierz pierwszy element jako element podziału
    int i = low; // indeks elementu mniejszego lub równego elementowi podziału
    int j = high; // indeks elementu większego od elementu podziału
    while (i < j) {
        // szukaj elementu większego od elementu podziału od lewej strony
        while (i <= high && A[i] <= pivot) {
            i++;
        }
        // szukaj elementu mniejszego lub równego elementu podziału od prawej strony
        while (j >= low && A[j] > pivot) {
            j--;
        }
        // zamień elementy, jeśli nie przekroczyły się
        if (i < j) {
            std::swap(A[i], A[j]);
        }
    }
    // umieść element podziału na właściwym miejscu
    std::swap(A[low], A[j]);
    // zwróć indeks elementu podziału
    return j;
}

// Funkcja do znajdowania k-tego co do wielkości elementu w tablicy
int AlgHoara(int A[], int low, int high, int k) {
    // sprawdź poprawność k
    if (k < 1 || k > high - low + 1) {
        return -1;
    }
    // podziel tablicę względem elementu podziału
    int p = partition(A, low, high);
    // sprawdź, w której części tablicy znajduje się k-ty element
    if (p - low + 1 == k) {
        // element podziału jest k-tym elementem
        return A[p];
    }
    else if (p - low + 1 > k) {
        // k-ty element jest w lewej części tablicy
        return AlgHoara(A, low, p - 1, k);
    }
    else {
        // k-ty element jest w prawej części tablicy
        return AlgHoara(A, p + 1, high, k - (p - low + 1));
    }
}

int main() {
    int A[] = {329, 5, 441, 154, 429, 135, 233, 312, 272, 286, 308, 442, 64, 490, 149, 302, 31, 432, 492, 144, 174, 199, 315, 290, 396, 420, 62, 133, 311, 237, 332, 127, 298, 436, 175, 253, 495, 104, 143, 417, 418, 33, 320, 260, 382, 483, 113, 434, 231, 171, 87, 193, 159, 111, 399, 18, 451, 325, 12, 316, 138, 213, 280, 493, 238, 224, 406, 376, 275, 196, 17, 314, 2, 234, 475, 44, 259, 358, 476, 262, 265, 28, 254, 79, 96, 477, 146, 67, 474, 392, 192, 489, 221, 452, 386, 252, 383, 313, 223, 389, 60, 447, 264, 256, 228, 375, 281, 100, 355, 413, 63, 318, 61, 123, 181, 445, 114, 424, 71, 291, 136, 261, 124, 220, 274, 377, 464, 287, 335, 52, 368, 498, 470, 86, 187, 444, 278, 351, 50, 484, 267, 339, 99, 336, 106, 379, 258, 59, 372, 319, 328, 487, 216, 323, 437, 15, 457, 229, 173, 341, 14, 282, 201, 182, 209, 166, 117, 337, 126, 210, 284, 30, 180, 362, 321, 204, 468, 405, 458, 402, 407, 425, 110, 431, 212, 170, 191, 188, 240, 218, 263, 352, 227, 103, 177, 440, 200, 401, 78, 88,329, 5, 441, 154, 429, 135, 233, 312, 272, 286, 308, 442, 64, 490, 149, 302, 31, 432, 492, 144, 174, 199, 315, 290, 396, 420, 62, 133, 311, 237, 332, 127, 298, 436, 175, 253, 495, 104, 143, 417, 418, 33, 320, 260, 382, 483, 113, 434, 231, 171, 87, 193, 159, 111, 399, 18, 451, 325, 12, 316, 138, 213, 280, 493, 238, 224, 406, 376, 275, 196, 17, 314, 2, 234, 475, 44, 259, 358, 476, 262, 265, 28, 254, 79, 96, 477, 146, 67, 474, 392, 192, 489, 221, 452, 386, 252, 383, 313, 223, 389, 60, 447, 264, 256, 228, 375, 281, 100, 355, 413, 63, 318, 61, 123, 181, 445, 114, 424, 71, 291, 136, 261, 124, 220, 274, 377, 464, 287, 335, 52, 368, 498, 470, 86, 187, 444, 278, 351, 50, 484, 267, 339, 99, 336, 106, 379, 258, 59, 372, 319, 328, 487, 216, 323, 437, 15, 457, 229, 173, 341, 14, 282, 201, 182, 209, 166, 117, 337, 126, 210, 284, 30, 180, 362, 321, 204, 468, 405, 458, 402, 407, 425, 110, 431, 212, 170, 191, 188, 240, 218, 263, 352, 227, 103, 177, 440, 200, 401, 78, 88, 329, 5, 441, 154, 429, 135, 233, 312, 272, 286, 308, 442, 64, 490, 149, 302, 31, 432, 492, 144, 174, 199, 315, 290, 396, 420, 62, 133, 311, 237, 332, 127, 298, 436, 175, 253, 495, 104, 143, 417, 418, 33, 320, 260, 382, 483, 113, 434, 231, 171, 87, 193, 159, 111, 399, 18, 451, 325, 12, 316, 138, 213, 280, 493, 238, 224, 406, 376, 275, 196, 17, 314, 2, 234, 475, 44, 259, 358, 476, 262, 265, 28, 254, 79, 96, 477, 146, 67, 474, 392, 192, 489, 221, 452, 386, 252, 383, 313, 223, 389, 60, 447, 264, 256, 228, 375, 281, 100, 355, 413, 63, 318, 61, 123, 181, 445, 114, 424, 71, 291, 136, 261, 124, 220, 274, 377, 464, 287, 335, 52, 368, 498, 470, 86, 187, 444, 278, 351, 50, 484, 267, 339, 99, 336, 106, 379, 258, 59, 372, 319, 328, 487, 216, 323, 437, 15, 457, 229, 173, 341, 14, 282, 201, 182, 209, 166, 117, 337, 126, 210, 284, 30, 180, 362, 321, 204, 468, 405, 458, 402, 329, 5, 441, 154, 429, 135, 233, 312, 272, 286, 308, 442, 64, 490, 149, 302, 31, 432, 492, 144, 174, 199, 315, 290, 396, 420, 62, 133, 311, 237, 332, 127, 298, 436, 175, 253, 495, 104, 143, 417, 418, 33, 320, 260, 382, 483, 113, 434, 231, 171, 87, 193, 159, 111, 399, 18, 451, 325, 12, 316, 138, 213, 280, 493, 238, 224, 406, 376, 275, 196, 17, 314, 2, 234, 475, 44, 259, 358, 476, 262, 265, 28, 254, 79, 96, 477, 146, 67, 474, 392, 192, 489, 221, 452, 386, 252, 383, 313, 223, 389, 60, 447, 264, 256, 228, 375, 281, 100, 355, 413, 63, 318, 61, 123, 181, 445, 114, 424, 71, 291, 136, 261, 124, 220, 274, 377, 464, 287, 335, 52, 368, 498, 470, 86, 187, 444, 278, 351, 50, 484, 267, 339, 99, 336, 106, 379, 258, 59, 372, 319, 328, 487, 216, 323, 437, 15, 457, 229, 173, 341, 14, 282, 201, 182, 209, 166, 117, 337, 126, 210, 284, 30, 180, 362, 321, 204, 468, 405, 458, 402, 329, 5, 441, 154, 429, 135, 233, 312, 272, 286, 308, 442, 64, 490, 149, 302, 31, 432, 492, 144, 174, 199, 315, 290, 396, 420, 62, 133, 311, 237, 332, 127, 298, 436, 175, 253, 495, 104, 143, 417, 418, 33, 320, 260, 382, 483, 113, 434, 231, 171, 87, 193, 159, 111, 399, 18, 451, 325, 12, 316, 138, 213, 280, 493, 238, 224, 406, 376, 275, 196, 17, 314, 2, 234, 475, 44, 259, 358, 476, 262, 265, 28, 254, 79, 96, 477, 146, 67, 474, 392, 192, 489, 221, 452, 386, 252, 383, 313, 223, 389, 60, 447, 264, 256, 228, 375, 281, 100, 355, 413, 63, 318, 61, 123, 181, 445, 114, 424, 71, 291, 136, 261, 124, 220, 274, 377, 464, 287, 335, 52, 368, 498, 470, 86, 187, 444, 278, 351, 50, 484, 267, 339, 99, 336, 106, 379, 258, 59, 372, 319, 328, 487, 216, 323, 437, 15, 457, 229, 173, 341, 14, 282, 201, 182, 209, 166, 117, 337, 126, 210, 284, 30, 180, 362, 321, 204, 468, 405, 458, 402, 407, 425, 110, 431, 212, 170, 191, 188, 240, 218, 263, 352, 227, 103, 177, 440, 200, 401, 78, 88407, 425, 110, 431, 212, 170, 191, 188, 240, 218, 263, 352, 227, 103, 177, 440, 200, 401, 78, 88407, 425, 110, 431, 212, 170, 191, 188, 240, 218, 263, 352, 227, 103, 177, 440, 200, 401, 78, 88}; // przykładowa tablica
    int n = sizeof(A) / sizeof(A[0]); // rozmiar tablicy
    int k = 100; // k-ty element do znalezienia
    std::chrono::high_resolution_clock::time_point start = std::chrono::high_resolution_clock::now(); // zacznij mierzyć czas
    int kth = AlgHoara(A, 0, n - 1, k); // znajdź k-ty element
    std::chrono::high_resolution_clock::time_point end = std::chrono::high_resolution_clock::now(); // skończ mierzyć czas
    std::chrono::duration<double, std::milli> time_span = end - start; // oblicz różnicę czasu w milisekundach
    std::cout << "K-ty element to " << kth << std::endl; // wypisz k-ty element
    std::cout << "Czas wykonania algorytmu to " << time_span.count() << " ms" << std::endl; // wypisz czas wykonania
    return 0;
}

